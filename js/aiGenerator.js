// AI Generator with Chat Interface - OpenAI Only
export function initAIGenerator(serverUrl = 'https://yappotamus.onrender.com') {
  console.log("üöÄ AI Generator Initializing...");
  
  const loadBtn = document.getElementById('load-ai-generator');
  const generateBtn = document.getElementById('generate-ai');
  const panel = document.getElementById('ai-generator-panel');
  const userInput = document.getElementById('user-input');
  const chatMessages = document.getElementById('chat-messages');
  const modelSelect = document.getElementById('model-select');
  const modelBadge = document.getElementById('current-model-badge');

  console.log("Elements found:", {
    loadBtn: !!loadBtn,
    generateBtn: !!generateBtn,
    userInput: !!userInput,
    chatMessages: !!chatMessages,
    modelSelect: !!modelSelect,
    modelBadge: !!modelBadge
  });

  if (!loadBtn || !generateBtn || !panel || !userInput || !chatMessages) {
    console.error("‚ùå Missing essential AI generator elements");
    return;
  }

  let chatHistory = [];
  let isLoading = false;

  // Event listeners
  loadBtn.addEventListener('click', () => {
    console.log("üìÇ Toggle panel clicked");
    const isVisible = panel.style.display === 'block';
    panel.style.display = isVisible ? 'none' : 'block';
    loadBtn.textContent = isVisible ? 'Open Generator' : 'Close Generator';
    
    // Auto-focus input when panel opens
    if (!isVisible) {
      setTimeout(() => userInput.focus(), 100);
    }
  });

  // Model selection handler (only OpenAI now)
  modelSelect.addEventListener('change', (e) => {
    console.log("üîÑ Model changed to:", e.target.value);
    updateModelBadge();
  });

  generateBtn.addEventListener('click', () => {
    console.log("üéØ Generate button clicked!");
    handleGenerate();
  });
  
  userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      console.log("‚å®Ô∏è Enter key pressed!");
      handleGenerate();
    }
  });

  function updateModelBadge() {
    const modelName = 'OpenAI GPT-3.5';
    if (modelBadge) {
      modelBadge.textContent = modelName;
      modelBadge.style.background = '#10a37f';
    }
    console.log("üìõ Model badge updated:", modelName);
  }

  async function handleGenerate() {
    const message = userInput.value.trim();
    console.log("üí¨ Handling generate with message:", message);
    
    if (!message) {
      alert("Please enter a message.");
      return;
    }

    if (isLoading) {
      console.log("‚è≥ Already loading, ignoring click");
      return;
    }

    // Add user message to chat
    addMessage(message, 'user');
    userInput.value = '';
    setLoading(true);

    try {
      console.log("üì° Calling OpenAI API");
      const endpoint = `${serverUrl}/api/openai`;
      
      const response = await fetch(endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          message: message,
          context: chatHistory.slice(-6) // Keep last 3 exchanges for context
        })
      });

      let data;
      try {
        data = await response.json();
      } catch (parseError) {
        console.error("‚ùå Failed to parse JSON response:", parseError);
        throw new Error("Invalid response from server");
      }

      console.log("üìä Response status:", response.status, "Data:", data);
      
      if (!response.ok) {
        throw new Error(data?.error || `Request failed: ${response.status}`);
      }

      if (!data?.reply) {
        throw new Error('No response generated by AI');
      }

      // Update chat history
      chatHistory.push(
        { role: 'user', content: message },
        { role: 'assistant', content: data.reply }
      );

      console.log("‚úÖ Successfully received AI response");
      addMessage(data.reply, 'ai', 'OpenAI GPT-3.5');

    } catch (err) {
      console.error('‚ùå API Error:', err);
      addMessage(`Error: ${err.message}`, 'ai', 'System');
    } finally {
      setLoading(false);
    }
  }

  function addMessage(content, sender, modelName = null) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const modelDisplay = sender === 'ai' && modelName 
      ? `<div class="model-indicator">${modelName}</div>` 
      : '';

    const messageContent = sender === 'user' 
      ? `<div class="message-content" style="background: #007bff; color: white; border-bottom-right-radius: 5px;">
           ${escapeHtml(content)}
         </div>`
      : `<div class="message-content" style="background: white; border: 1px solid #e0e0e0; border-bottom-left-radius: 5px;">
           ${modelDisplay}
           ${escapeHtml(content)}
         </div>`;

    messageDiv.innerHTML = messageContent;
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
  }

  function setLoading(loading) {
    isLoading = loading;
    generateBtn.disabled = loading;
    generateBtn.textContent = loading ? 'Generating...' : 'Generate Text';
    
    if (loading) {
      // Add typing indicator
      const typingDiv = document.createElement('div');
      typingDiv.className = 'message ai-message';
      typingDiv.id = 'typing-indicator';
      typingDiv.innerHTML = `
        <div class="message-content" style="background: white; border: 1px solid #e0e0e0; border-bottom-left-radius: 5px;">
          <div class="model-indicator">OpenAI GPT-3.5</div>
          <div class="typing-indicator" style="display: inline-flex; align-items: center; gap: 3px;">
            <div class="typing-dot" style="width: 6px; height: 6px; border-radius: 50%; background: #999; animation: typing-bounce 1.4s infinite ease-in-out;"></div>
            <div class="typing-dot" style="width: 6px; height: 6px; border-radius: 50%; background: #999; animation: typing-bounce 1.4s infinite ease-in-out; animation-delay: -0.16s;"></div>
            <div class="typing-dot" style="width: 6px; height: 6px; border-radius: 50%; background: #999; animation: typing-bounce 1.4s infinite ease-in-out; animation-delay: -0.32s;"></div>
          </div>
        </div>
      `;
      
      // Add CSS animation if not already present
      if (!document.querySelector('#typing-animation')) {
        const style = document.createElement('style');
        style.id = 'typing-animation';
        style.textContent = `
          @keyframes typing-bounce {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1); opacity: 1; }
          }
        `;
        document.head.appendChild(style);
      }
      
      chatMessages.appendChild(typingDiv);
      scrollToBottom();
    } else {
      // Remove typing indicator
      const typingIndicator = document.getElementById('typing-indicator');
      if (typingIndicator) {
        typingIndicator.remove();
      }
    }
  }

  function scrollToBottom() {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }

  // Initialize
  updateModelBadge();
  console.log("‚úÖ AI Generator Ready - OpenAI Only");
}